#Initialization method-> Random partition
import math
import random
import matplotlib.pyplot as plt

def generate_coord(scalar):
    random.seed(None)
    # Function returns x and y coordinate
    # scaled by input
    x = random.random()
    y = random.random()

    x = x*scalar
    y = y*scalar
    
    
    return x,y

def create_field(nrofdots,scalar):
    # Function returns field of dots
    listofx = []
    listofy = []
    for i in range(1,int(nrofdots)):
        x,y = generate_coord(scalar)
        listofx.append(x)
        listofy.append(y)
    return listofx, listofy

def makeTupleList(listx,listy):
    # takes two lists and returns one list of corresponding elements combined in tuples
    tuplelist = []
    for i in range(1,len(listx)):
        tuplelist.append((listx[i],listy[i]))
    return tuplelist


def euclid_Dist(centroid, listofcoords):
    #calculates mean distance, returns list of distances
    listofdist = []
    for j in listofcoords:
        deltax = abs(centroid[0] - j[0]) #xcentroid - xcoord
        deltay = abs(centroid[1] - j[1]) #ycentroid - ycoord
        listofdist.append(math.sqrt(deltax**2 + deltay**2))
    return listofdist

def compare(listofcoords):
    # takes in a list of lists (confusing I know.. )
    pass

def plotTuple(tupl):
    for i in tupl:
        plt.scatter(i[0],i[1])
    plt.show()



x,y = create_field(10,10)
tuplist = makeTupleList(x,y)
centroid = [(3,3),(7,7)]

a = euclid_Dist(centroid[0],tuplist)
b = euclid_Dist(centroid[1],tuplist)

# compares a and b, returns the coords corresponding to the smallest distance to list belonging to the centroid..

lista = []
listb = []
for i in range(len(a)):
    if a[i] <= b[i]:
        lista.append(tuplist[i])
    else:
        listb.append(tuplist[i])
        
plt.figure(1)
#plt.subplot(211)
for i in lista:
    plt.scatter(i[0],i[1], color = 'Red')
#plt.subplot(212)
for i in listb:
    plt.scatter(i[0],i[1], color = 'Blue')

#plot centroids
plt.scatter(3,3, color = "Green")
plt.scatter(7,7, color = "Green")

    
plt.show()

       
#plt.figure(200)
#plotTuple(c)
#plt.figure(300)
#plotTuple(d)

#for i in range(len(a)):
#    if a[i] > b[i]:
#        print(a[i])
#        acoordsx.append(x[i])
#        acoordsy.append(y[i])
#   else:
#        bcoordsx.append(x[i])
#        bcoordsy.append(y[i])
#plt.scatter(3,3)
#plt.scatter(7,7)
#plt.scatter(acoordsx,acoordsy)
#plt.scatter(bcoordsx,bcoordsy)
#plt.show()
