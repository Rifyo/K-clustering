#Non functional, needs new sorting function for k clusters
import math
import random
import matplotlib.pyplot as plt

def generate_coord(scalar):
    random.seed(None)
    # Function returns x and y coordinate
    # scaled by input
    x = random.random()
    y = random.random()

    x = x*scalar
    y = y*scalar
    
    return x,y

def create_field(nrofdots,scalar):
    # Function returns list of tuples containing random datapoints
    listofx = []
    listofy = []
    for i in range(1,int(nrofdots)):
        x,y = generate_coord(scalar)
        listofx.append(x)
        listofy.append(y)

    tuplelist = makeTupleList(listofx, listofy)
    
    return tuplelist

def makeTupleList(listx,listy):
    # takes two lists and returns one list of corresponding elements combined in tuples
    tuplelist = []
    for i in range(1,len(listx)):
        tuplelist.append((listx[i],listy[i]))
    return tuplelist


def euclid_Dist(centroid, listofcoords):
    #calculates mean distance, returns list of distances
    listofdist = []
    for j in listofcoords:
        deltax = abs(centroid[0] - j[0]) #xcentroid - xcoord
        deltay = abs(centroid[1] - j[1]) #ycentroid - ycoord
        listofdist.append(math.sqrt(deltax**2 + deltay**2))
    return listofdist


def plotTuple(tupl):
    for i in tupl:
        plt.scatter(i[0],i[1])
    plt.show()

def sort(a,b,datapoints):
    #returns list of points closer and list of all points farther
    incluster = []
    notincluster = []
    for i in range(len(datapoints)):
        if a[i] <= b[i]:
            incluster.append(datapoints[i])
        else:
            notincluster.append(datapoints[i])
    return incluster,notincluster


def plot(lista,listb,centroid1,centroid2):
    plt.figure(1)
    #plt.subplot(211)
    for i in lista:
        plt.scatter(i[0],i[1], color = 'Red')
    #plt.subplot(212)
    for i in listb:
        plt.scatter(i[0],i[1], color = 'Blue')

    #plot centroids
    plt.scatter(centroid1[0],centroid1[1], color = "Green")
    plt.scatter(centroid2[0],centroid2[1], color = "Green")

        
    plt.show()

def updateCentroid(listofpoints):
    #takes a list of points belonging to a centroid
    #and spits out a new centroid in form of a tuple
    n = len(listofpoints)
    sumx = 0
    sumy = 0
    
    for i in listofpoints:
        sumx = sumx + i[0]

    for i in listofpoints:
        sumy = sumy + i[1]
    if n == 0:
        n = 1
    x = sumx/n
    y = sumy/n

    return (x,y)

def newIteration(centroid, lista, listb):

    
    newcentroid1 = updateCentroid(lista)
    newcentroid2 = updateCentroid(listb)

    TOL1 = abs(centroid[0][0] - newcentroid1[0]) + abs(centroid[0][1] - newcentroid1[1])
    TOL2 = abs(centroid[1][0] - newcentroid2[0]) + abs(centroid[1][1] - newcentroid2[1])

    newTOL = TOL1 + TOL2
    
    return newTOL, (newcentroid1, newcentroid2)

def selectCentroid(k, datapoints):
    #Selects a random k number of centroids from datapoints
    # If k>nrofdatapoints then k = nrofdatapoints
    # Returns list of centroids
    nrofdatapoints = len(datapoints)
    listofcentroids = []
    if k > nrofdatapoints:
        k = nrofdatapoints

    for i in range(k):
        x = random.randint(0,nrofdatapoints) #creates random index
        if x in listofcentroids:
            if i == 0:
                i = -1
            else:
                i = i-1
        else:
            listofcentroids.append(datapoints[x])
    return listofcentroids
#initialization
nrofdatapoints = 10
nrofclusters = 2

datapoints = create_field(nrofdatapoints,10)

#centroid = []
#for i in nrofclusters:
#    centroid.append(nrofclusters)
#centroid = [(3,3),(1,1)]

centroid = selectCentroid(2,datapoints)

#step 1
listofdist = [] #a list of lists of distances
                #list belonging to centroid 1 = index 1
listofdist = []
for i in range(nrofclusters):
    listofdist.append(euclid_Dist(centroid[i],datapoints)) #x-values
#a = euclid_Dist(centroid[0],datapoints)
#b = euclid_Dist(centroid[1],datapoints)

#ADD SORT FUNCTION

plot(lista,listb,centroid[0],centroid[1])

tol = 1
while tol > 0.001:
    tol, centroid = newIteration(centroid,lista,listb)
    a = euclid_Dist(centroid[0],datapoints)
    b = euclid_Dist(centroid[1],datapoints)
    lista, listb = sort(a,b,datapoints)

    if tol == 0:
        print("finished")

    plot(lista,listb,centroid[0],centroid[1])
